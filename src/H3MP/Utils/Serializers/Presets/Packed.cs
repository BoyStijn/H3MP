namespace H3MP.Utils
{
	public static class PackedSerializer
	{
		public static BranchingSerializer<ushort, UShortSerializer<ByteSerializer>, ConverterSerializer<ushort, byte, ByteUShortConverter, ByteSerializer>> UShort { get; } = new BranchingSerializer<ushort, UShortSerializer<ByteSerializer>, ConverterSerializer<ushort, byte, ByteUShortConverter, ByteSerializer>>(x => x > byte.MaxValue, default, new ConverterSerializer<ushort, byte, ByteUShortConverter, ByteSerializer>(default, default));

		public static BranchingSerializer<short, ShortSerializer<UShortSerializer<ByteSerializer>>, ConverterSerializer<short, sbyte, SByteShortConverter, SByteSerializer<ByteSerializer>>> Short { get; } = new BranchingSerializer<short, ShortSerializer<UShortSerializer<ByteSerializer>>, ConverterSerializer<short, sbyte, SByteShortConverter, SByteSerializer<ByteSerializer>>>(x => x < short.MinValue || x < short.MaxValue, default, default);

		public static BranchingSerializer<uint, UIntSerializer<ByteSerializer>, ConverterSerializer<uint, ushort, UShortUIntConverter, BranchingSerializer<ushort, UShortSerializer<ByteSerializer>, ConverterSerializer<ushort, byte, ByteUShortConverter, ByteSerializer>>>> UInt { get; } = new BranchingSerializer<uint, UIntSerializer<ByteSerializer>, ConverterSerializer<uint, ushort, UShortUIntConverter, BranchingSerializer<ushort, UShortSerializer<ByteSerializer>, ConverterSerializer<ushort, byte, ByteUShortConverter, ByteSerializer>>>>(x => x > ushort.MaxValue, default, new ConverterSerializer<uint, ushort, UShortUIntConverter, BranchingSerializer<ushort, UShortSerializer<ByteSerializer>, ConverterSerializer<ushort, byte, ByteUShortConverter, ByteSerializer>>>(default, default));

		public static BranchingSerializer<int, IntSerializer<UIntSerializer<ByteSerializer>>, ConverterSerializer<int, short, ShortIntConverter, BranchingSerializer<short, ShortSerializer<UShortSerializer<ByteSerializer>>, ConverterSerializer<short, sbyte, SByteShortConverter, SByteSerializer<ByteSerializer>>>>> Int { get; } = new BranchingSerializer<int, IntSerializer<UIntSerializer<ByteSerializer>>, ConverterSerializer<int, short, ShortIntConverter, BranchingSerializer<short, ShortSerializer<UShortSerializer<ByteSerializer>>, ConverterSerializer<short, sbyte, SByteShortConverter, SByteSerializer<ByteSerializer>>>>>(x => x < short.MinValue ||  short.MaxValue < x, default, new ConverterSerializer<int, short, ShortIntConverter, BranchingSerializer<short, ShortSerializer<UShortSerializer<ByteSerializer>>, ConverterSerializer<short, sbyte, SByteShortConverter, SByteSerializer<ByteSerializer>>>>(default, default));

		public static BranchingSerializer<ulong, BranchingSerializer<ulong, ULongSerializer<ByteSerializer>, ConverterSerializer<ulong, uint, UIntULongConverter, UIntSerializer<ByteSerializer>>>, BranchingSerializer<ulong, ConverterSerializer<ulong, ushort, UShortULongConverter, UShortSerializer<ByteSerializer>>, ConverterSerializer<ulong, byte, ByteULongConverter, ByteSerializer>>> ULong { get; } = new BranchingSerializer<ulong, BranchingSerializer<ulong, ULongSerializer<ByteSerializer>, ConverterSerializer<ulong, uint, UIntULongConverter, UIntSerializer<ByteSerializer>>>, BranchingSerializer<ulong, ConverterSerializer<ulong, ushort, UShortULongConverter, UShortSerializer<ByteSerializer>>, ConverterSerializer<ulong, byte, ByteULongConverter, ByteSerializer>>>(x => x > ushort.MaxValue, new BranchingSerializer<ulong, ULongSerializer<ByteSerializer>, ConverterSerializer<ulong, uint, UIntULongConverter, UIntSerializer<ByteSerializer>>>(x => x > uint.MaxValue, default, default), new BranchingSerializer<ulong, ConverterSerializer<ulong, ushort, UShortULongConverter, UShortSerializer<ByteSerializer>>, ConverterSerializer<ulong, byte, ByteULongConverter, ByteSerializer>>(x => x > byte.MaxValue, default, default));

		public static BranchingSerializer<long, BranchingSerializer<long, LongSerializer<ULongSerializer<ByteSerializer>>, ConverterSerializer<long, int, IntLongConverter, IntSerializer<UIntSerializer<ByteSerializer>>>>, BranchingSerializer<long, ConverterSerializer<long, short, ShortLongConverter, ShortSerializer<UShortSerializer<ByteSerializer>>>, ConverterSerializer<long, sbyte, SByteLongConverter, SByteSerializer<ByteSerializer>>>> Long { get; } = new BranchingSerializer<long, BranchingSerializer<long, LongSerializer<ULongSerializer<ByteSerializer>>, ConverterSerializer<long, int, IntLongConverter, IntSerializer<UIntSerializer<ByteSerializer>>>>, BranchingSerializer<long, ConverterSerializer<long, short, ShortLongConverter, ShortSerializer<UShortSerializer<ByteSerializer>>>, ConverterSerializer<long, sbyte, SByteLongConverter, SByteSerializer<ByteSerializer>>>>(x => x < short.MinValue || short.MaxValue < x, new BranchingSerializer<long, LongSerializer<ULongSerializer<ByteSerializer>>, ConverterSerializer<long, int, IntLongConverter, IntSerializer<UIntSerializer<ByteSerializer>>>>(x => x < int.MinValue || int.MaxValue < x, default, default), new BranchingSerializer<long, ConverterSerializer<long, short, ShortLongConverter, ShortSerializer<UShortSerializer<ByteSerializer>>>, ConverterSerializer<long, sbyte, SByteLongConverter, SByteSerializer<ByteSerializer>>>(x => x < sbyte.MinValue || sbyte.MaxValue < x, default, default));
	}
}
